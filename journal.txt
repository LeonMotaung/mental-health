// Journaling Schema
const journalingSchema = new mongoose.Schema({
    thought: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
});

const JournalEntry = mongoose.model('JournalEntry', journalingSchema);
// Random Thought Generator
const randomThoughts = [
    'What are you grateful for today?',
    'Write about a positive experience you had this week.',
    'How did you overcome a challenge in the past month?',
    'What is one goal you have for the next month?',
    'What motivates you to keep going?',
    'Describe a moment when you felt truly at peace.',
    'What would you do if you werenâ€™t afraid?'
];

// Journaling page route
app.get('/journal', (req, res) => {
    // Generate a random prompt
    const randomPrompt = randomThoughts[Math.floor(Math.random() * randomThoughts.length)];

    res.render('journal', { prompt: randomPrompt }); // Render 'journal.ejs' page
});

// Submit a journal entry
app.post('/submit-journal', async (req, res) => {
    const { thought } = req.body;

    try {
        const newEntry = new JournalEntry({ thought });
        await newEntry.save();

        res.status(200).json({
            success: true,
            message: 'Your journal entry has been submitted successfully.',
        });
    } catch (error) {
        console.error('Error submitting journal entry:', error);
        res.status(500).json({
            success: false,
            message: 'There was an error submitting your entry. Please try again.',
        });
    }
});
// Fetch all journal entries (admin access or for future features)
app.get('/all-journals', async (req, res) => {
    try {
        const entries = await JournalEntry.find().sort({ createdAt: -1 }); // Newest entries first
        res.render('all-journals', { entries });
    } catch (error) {
        console.error('Error fetching journal entries:', error);
        res.status(500).send('Error fetching journal entries.');
    }
});
